{
  "name": "RDF.rb",
  "tagline": "RDF.rb is a pure-Ruby library for working with Resource Description Framework (RDF) data.",
  "body": "# RDF.rb: Linked Data for Ruby\r\n\r\nThis is a pure-Ruby library for working with [Resource Description Framework\r\n(RDF)][RDF] data.\r\n\r\n* <http://ruby-rdf.github.com/rdf>\r\n* <http://blog.datagraph.org/2010/12/rdf-for-ruby>\r\n* <http://blog.datagraph.org/2010/03/rdf-for-ruby>\r\n* <http://blog.datagraph.org/2010/04/parsing-rdf-with-ruby>\r\n* <http://blog.datagraph.org/2010/04/rdf-repository-howto>\r\n\r\n[![Gem Version](https://badge.fury.io/rb/rdf.png)](http://badge.fury.io/rb/rdf)\r\n[![Build Status](https://travis-ci.org/ruby-rdf/rdf.png?branch=master)](http://travis-ci.org/ruby-rdf/rdf)\r\n[![Code Climate](https://codeclimate.com/github/ruby-rdf/rdf/badges/gpa.svg)](https://codeclimate.com/github/ruby-rdf/rdf)\r\n[![Coverage Status](https://coveralls.io/repos/ruby-rdf/rdf/badge.svg)](https://coveralls.io/r/ruby-rdf/rdf)\r\n[![Join the chat at https://gitter.im/ruby-rdf/rdf](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ruby-rdf/rdf?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n## Features\r\n\r\n* 100% pure Ruby with minimal dependencies and no bloat.\r\n* Fully compatible with [RDF 1.1][] specifications.\r\n* 100% free and unencumbered [public domain](http://unlicense.org/) software.\r\n* Provides a clean, well-designed RDF object model and related APIs.\r\n* Supports parsing and serializing [N-Triples][] and [N-Quads][] out of the box, with more\r\n  serialization format support available through add-on extensions.\r\n* Includes in-memory graph and repository implementations, with more storage\r\n  adapter support available through add-on extensions.\r\n* Implements basic graph pattern (BGP) query evaluation.\r\n* Plays nice with others: entirely contained in the `RDF` module, and does\r\n  not modify any of Ruby's core classes or standard library.\r\n* Based entirely on Ruby's autoloading, meaning that you can generally make\r\n  use of any one part of the library without needing to load up the rest.\r\n* Compatible with Ruby Ruby 2.x, Rubinius and JRuby 1.7+ (in Ruby 2.0 mode).\r\n* Performs auto-detection of input to select appropriate Reader class if one\r\n  cannot be determined from file characteristics.\r\n\r\n### HTTP requests\r\n\r\nRDF.rb uses `Net::HTTP` for retrieving HTTP and HTTPS resources. If the\r\n[RestClient][] gem is included, that will be used instead to retrieve remote\r\nresources. Clients may also consider using [RestClient Components][] to enable\r\nclient-side caching of HTTP results using [Rack::Cache][] or other Rack\r\nmiddleware.\r\n\r\n## Differences between RDF 1.0 and RDF 1.1\r\n\r\nThis version of RDF.rb is fully compatible with [RDF 1.1][], but it creates some\r\nmarginal incompatibilities with [RDF 1.0][], as implemented in versions prior to\r\nthe 1.1 release of RDF.rb:\r\n\r\n* Introduces {RDF::IRI}, as a synonym for {RDF::URI} either {RDF::IRI} or {RDF::URI} can be used interchangeably. Versions of RDF.rb prior to the 1.1 release were already compatible with IRIs. Internationalized Resource Identifiers (see [RFC3987][]) are a super-set of URIs (see [RFC3986][]) which allow for characters other than standard US-ASCII.\r\n* {RDF::URI} no longer uses the `Addressable` gem. As URIs typically don't need to be parsed, this provides a substantial performance improvement when enumerating or querying graphs and repositories.\r\n* {RDF::List} no longer emits a `rdf:List` type. However, it will now recognize any subjects that are {RDF::Node} instances as being list elements, as long as they have both `rdf:first` and `rdf:rest` predicates.\r\n* {RDF::Graph} adding a `graph_name` to a graph may only be done when the underlying storage model supports graph_names (the default {RDF::Repository} does). The notion of `graph_name` in RDF.rb is treated equivalently to [Named Graphs](http://www.w3.org/TR/rdf11-concepts/#dfn-named-graph) within an RDF Dataset, and graphs on their own are not named.\r\n* {RDF::Graph}, {RDF::Statement} and {RDF::List} now include {RDF::Value}, and not {RDF::Resource}. Made it clear that using {RDF::Graph} does not mean that it may be used within an {RDF::Statement}, for this see {RDF::Term}.\r\n* {RDF::Statement} now is stricter about checking that all elements are valid when validating.\r\n* {RDF::NTriples::Writer} and {RDF::NQuads::Writer} now default to validate output, only allowing valid statements to be emitted. This may disabled by setting the `:validate` option to `false`.\r\n* {RDF::Dataset} is introduced as a class alias of {RDF::Repository}. This allows closer alignment to the RDF concept of [Dataset](http://www.w3.org/TR/rdf11-concepts/#dfn-dataset).\r\n* The `graph_name` of a graph within a Dataset or Repository may be either an {RDF::IRI} or {RDF::Node}. Implementations of repositories may restrict this to being only {RDF::IRI}.\r\n* There are substantial and somewhat incompatible changes to {RDF::Literal}. In [RDF 1.1][], all literals are typed, including plain literals and language tagged literals. Internally, plain literals are given the `xsd:string` datatype and language tagged literals are given the `rdf:langString` datatype. Creating a plain literal, without a datatype or language, will automatically provide the `xsd:string` datatype; similar for language tagged literals. Note that most serialization formats will remove this datatype. Code which depends on a literal having the `xsd:string` datatype being different from a plain literal (formally, without a datatype) may break. However note that the `#has\\_datatype?` will continue to return `false` for plain or language-tagged literals.\r\n* {RDF::Query#execute} now accepts a block and returns {RDF::Query::Solutions}. This allows `enumerable.query(query)` to behave like `query.execute(enumerable)` and either return an enumerable or yield each solution.\r\n* {RDF::Queryable#query} now returns {RDF::Query::Solutions} instead of an Enumerator if it's argument is an {RDF::Query}.\r\n* {RDF::Util::File.open\\_file} now performs redirects and manages `base_uri` based on W3C recommendations:\r\n  * `base_uri` is set to the original URI if a status 303 is provided, otherwise any other redirect will set `base_uri` to the redirected location.\r\n  * `base_uri` is set to the content of the `Location` header if status is _success_.\r\n* Additionally, {RDF::Util::File.open\\_file} sets the result encoding from `charset` if provided, defaulting to `UTF-8`. Other access methods include `last_modified` and `content_type`, \r\n* {RDF::StrictVocabulary} added with an easy way to keep vocabulary definitions up to date based on their OWL or RDFS definitions. Most vocabularies are now StrictVocabularies meaning that an attempt to resolve a particular term in that vocabulary will error if the term is not defined in the vocabulary.\r\n* New vocabulary definitions have been added for [ICal](http://www.w3.org/2002/12/cal/icaltzd#), [Media Annotations (MA)](http://www.w3.org/ns/ma-ont#), [Facebook OpenGraph (OG)](http://ogp.me/ns#), [PROV](http://www.w3.org/ns/prov#), [SKOS-XL (SKOSXL)](http://www.w3.org/2008/05/skos-xl#), [Data Vocabulary (V)](http://rdf.data-vocabulary.org/), [VCard](http://www.w3.org/2006/vcard/ns#), [VOID](http://rdfs.org/ns/void#http://rdfs.org/ns/void#), [Powder-S (WDRS)](http://www.w3.org/2007/05/powder-s#), and [XHV](http://www.w3.org/1999/xhtml/vocab#).\r\n\r\nNotably, {RDF::Queryable#query} and {RDF::Query#execute} are now completely symmetric; this allows an implementation of {RDF::Queryable} to optimize queries using implementation-specific logic, allowing for substantial performance improvements when executing BGP queries.\r\n\r\n## Tutorials\r\n\r\n* [Getting data from the Semantic Web using Ruby and RDF.rb](http://semanticweb.org/wiki/Getting_data_from_the_Semantic_Web_%28Ruby%29)\r\n* [Using RDF.rb and Spira to process RDF data from the British Ordnance Survey](http://stephenpope.co.uk/?p=85)\r\n* [Getting started with RDF and SPARQL using 4store and RDF.rb](http://www.jenitennison.com/blog/node/152)\r\n\r\n## Command Line\r\nWhen installed, RDF.rb includes a `rdf` shell script which acts as a wrapper to perform a number of different\r\noperations on RDF files using available readers and writers.\r\n\r\n* `count`: Parse and RDF input and count the number of statements.\r\n* `predicates`: Returns unique objects from parsed input.\r\n* `objects`: Returns unique objects from parsed input.\r\n* `serialize`: Parse an RDF input and re-serializing to [N-Triples][] or another available format using `--output-format` option.\r\n* `subjects`: Returns unique subjects from parsed input.\r\n\r\nThe `serialize` command can also be used to serialize as a vocabulary\r\n## Examples\r\n\r\n    require 'rdf'\r\n    include RDF\r\n\r\n### Writing RDF data using the [N-Triples][] format\r\n\r\n    require 'rdf/ntriples'\r\n    graph = RDF::Graph.new << [:hello, RDF::RDFS.label, \"Hello, world!\"]\r\n    graph.dump(:ntriples)\r\n    \r\nor\r\n\r\n    RDF::Writer.open(\"hello.nt\") { |writer| writer << graph }\r\n\r\n### Reading RDF data in the [N-Triples][] format\r\n\r\n    require 'rdf/ntriples'\r\n    graph = RDF::Graph.load(\"http://ruby-rdf.github.com/rdf/etc/doap.nt\")\r\n    \r\nor\r\n\r\n    RDF::Reader.open(\"http://ruby-rdf.github.com/rdf/etc/doap.nt\") do |reader|\r\n      reader.each_statement do |statement|\r\n        puts statement.inspect\r\n      end\r\n    end\r\n\r\n### Reading RDF data in other formats\r\n{RDF::Reader.open} and {RDF::Repository.load} use a number of mechanisms to determine the appropriate reader\r\nto use when loading a file. The specific format to use can be forced using, e.g. `format: :ntriples`\r\noption where the specific format symbol is determined by the available readers. Both also use\r\nMimeType or file extension, where available.\r\n\r\n    require 'rdf/nquads'\r\n    \r\n    graph = RDF::Graph.load(\"http://ruby-rdf.github.com/rdf/etc/doap.nq\", format: :nquads)\r\n\r\nA specific sub-type of Reader can also be invoked directly:\r\n\r\n    require 'rdf/nquads'\r\n    \r\n    RDF::NQuads::Reader.open(\"http://ruby-rdf.github.com/rdf/etc/doap.nq\") do |reader|\r\n      reader.each_statement do |statement|\r\n        puts statement.inspect\r\n      end\r\n    end\r\n\r\nReader/Writer implementations may override {RDF::Format.detect}, which takes a small sample if input\r\nand return a boolean indicating if it matches that specific format. In the case that a format cannot\r\nbe detected from filename or other options, or that more than one format is identified,\r\n{RDF::Format.for} will query each loaded format by invoking it's `detect` method, and the first successful\r\nmatch will be used to read the input.\r\n\r\n### Writing RDF data using other formats\r\n{RDF::Writer.open}, {RDF::Enumerable#dump}, {RDF::Writer.dump} take similar options to {RDF::Reader.open} to determine the\r\nappropriate writer to use.\r\n\r\n    require 'linkeddata'\r\n\r\n    RDF::Writer.open(\"hello.nq\", format: :nquads) do |writer|\r\n      writer << RDF::Repository.new do |repo|\r\n        repo << RDF::Statement.new(:hello, RDF::RDFS.label, \"Hello, world!\", graph_name: RDF::URI(\"http://example/graph_name\"))\r\n      end\r\n    end\r\n\r\nA specific sub-type of Writer can also be invoked directly:\r\n\r\n    require 'rdf/nquads'\r\n\r\n    repo = RDF::Repository.new << RDF::Statement.new(:hello, RDF::RDFS.label, \"Hello, world!\", graph_name: RDF::URI(\"http://example/graph_name\"))\r\n    File.open(\"hello.nq\", \"w\") {|f| f << repo.dump(:nquads)}\r\n\r\n## Reader/Writer convenience methods\r\n{RDF::Enumerable} implements `to_{format}` for each available instance of {RDF::Reader}.\r\nFor example, if `rdf/turtle` is loaded, this allows the following:\r\n\r\n    graph = RDF::Graph.new << [:hello, RDF::RDFS.label, \"Hello, world!\"]\r\n    graph.to_ttl\r\n\r\nSimilarly, {RDF::Mutable} implements `from_{format}` for each available instance\r\nof {RDF::Writer}. For example:\r\n\r\n    graph = RDF::Graph.new\r\n    graph.from_ttl(\"[ a <http://www.w3.org/1999/02/22-rdf-syntax-ns#Resource>]\")\r\n\r\nNote that no prefixes are loaded automatically, however they can be provided as arguments:\r\n\r\n    graph.from_ttl(\"[ a rdf:Resource]\", prefixes: {rdf: RDF.to_uri})\r\n\r\n### Querying RDF data using basic graph patterns (BGPs)\r\n\r\n    require 'rdf/ntriples'\r\n    \r\n    graph = RDF::Graph.load(\"http://ruby-rdf.github.com/rdf/etc/doap.nt\")\r\n    query = RDF::Query.new({\r\n      person: {\r\n        RDF.type  => FOAF.Person,\r\n        FOAF.name => :name,\r\n        FOAF.mbox => :email,\r\n      }\r\n    })\r\n    \r\n    query.execute(graph) do |solution|\r\n      puts \"name=#{solution.name} email=#{solution.email}\"\r\n    end\r\n\r\nThe same query may also be run from the graph:\r\n\r\n    graph.query(query) do |solution|\r\n      puts \"name=#{solution.name} email=#{solution.email}\"\r\n    end\r\n\r\nIn general, querying from using the `queryable` instance allows a specific implementation of `queryable` to perform query optimizations specific to the datastore on which it is based.\r\n\r\nA separate [SPARQL][SPARQL doc] gem builds on basic BGP support to provide full support for [SPARQL 1.0](http://www.w3.org/TR/rdf-sparql-query/) queries.\r\n\r\n### Using pre-defined RDF vocabularies\r\n\r\n    DC.title      #=> RDF::URI(\"http://purl.org/dc/terms/title\")\r\n    FOAF.knows    #=> RDF::URI(\"http://xmlns.com/foaf/0.1/knows\")\r\n    RDF.type      #=> RDF::URI(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\")\r\n    RDFS.seeAlso  #=> RDF::URI(\"http://www.w3.org/2000/01/rdf-schema#seeAlso\")\r\n    RSS.title     #=> RDF::URI(\"http://purl.org/rss/1.0/title\")\r\n    OWL.sameAs    #=> RDF::URI(\"http://www.w3.org/2002/07/owl#sameAs\")\r\n    XSD.dateTime  #=> RDF::URI(\"http://www.w3.org/2001/XMLSchema#dateTime\")\r\n\r\n### Using ad-hoc RDF vocabularies\r\n\r\n    foaf = RDF::Vocabulary.new(\"http://xmlns.com/foaf/0.1/\")\r\n    foaf.knows    #=> RDF::URI(\"http://xmlns.com/foaf/0.1/knows\")\r\n    foaf[:name]   #=> RDF::URI(\"http://xmlns.com/foaf/0.1/name\")\r\n    foaf['mbox']  #=> RDF::URI(\"http://xmlns.com/foaf/0.1/mbox\")\r\n\r\n## Documentation\r\n\r\n<http://rubydoc.info/github/ruby-rdf/rdf/frames>\r\n\r\n### RDF Object Model\r\n\r\n<http://blog.datagraph.org/2010/03/rdf-for-ruby>\r\n\r\n* {RDF::Value}\r\n  * {RDF::Term}\r\n    * {RDF::Literal}\r\n      * {RDF::Literal::Boolean}\r\n      * {RDF::Literal::Date}\r\n      * {RDF::Literal::DateTime}\r\n      * {RDF::Literal::Decimal}\r\n      * {RDF::Literal::Double}\r\n      * {RDF::Literal::Integer}\r\n      * {RDF::Literal::Time}\r\n      * [RDF::XSD](http://rubydoc.info/github/gkellogg/rdf-xsd/master/frames) (extension)\r\n    * {RDF::Resource}\r\n      * {RDF::Node}\r\n      * {RDF::URI}\r\n  * {RDF::List}\r\n  * {RDF::Graph}\r\n  * {RDF::Statement}\r\n\r\n### RDF Serialization\r\n\r\n<http://blog.datagraph.org/2010/04/parsing-rdf-with-ruby>\r\n\r\n* {RDF::Format}\r\n* {RDF::Reader}\r\n* {RDF::Writer}\r\n\r\n### RDF Serialization Formats\r\n\r\nThe following is a partial list of RDF formats implemented either natively, or through the inclusion of\r\nother gems:\r\n\r\n* {RDF::NTriples}\r\n* {RDF::NQuads}\r\n* [JSON::LD][] (extension)\r\n* [RDF::JSON][] (extension)\r\n* [RDF::Microdata][] (extension)\r\n* [RDF::N3][] (extension)\r\n* [RDF::Raptor::RDFXML](http://ruby-rdf.github.io/rdf-raptor) (extension)\r\n* [RDF::Raptor::Turtle](http://ruby-rdf.github.io/rdf-raptor) (extension)\r\n* [RDF::RDFa][] (extension)\r\n* [RDF::RDFXML][] (extension)\r\n* [RDF::TriG][] (extension)\r\n* [RDF::TriX][] (extension)\r\n* [RDF::Turtle][] (extension)\r\n\r\nThe meta-gem [LinkedData][LinkedData doc] includes many of these gems.\r\n\r\n### RDF Datatypes\r\n\r\nRDF.rb only implements core datatypes from the\r\n[RDF Datatype Map](http://www.w3.org/TR/rdf11-concepts/#datatype-maps). Most other\r\nXSD and RDF datatype implementations can be find in the following:\r\n\r\n* {RDF::XSD}\r\n\r\n### Graph Isomorphism\r\n\r\nTwo graphs may be compared with each other to determine if they are _isomorphic_.\r\nAs BNodes within two different graphs are no equal, graphs may not be directly compared.\r\nThe `RDF::Isomorphic` gem may be used to determine if they make the same statements, aside\r\nfrom BNode identity (i.e., they each entail the other)\r\n\r\n* `RDF::Isomorphic`\r\n\r\n### RDF Storage\r\n\r\n<http://blog.datagraph.org/2010/04/rdf-repository-howto>\r\n\r\n* {RDF::Repository}\r\n  * {RDF::Countable}\r\n  * {RDF::Enumerable}\r\n  * {RDF::Indexable}\r\n  * {RDF::Queryable}\r\n  * {RDF::Mutable}\r\n  * {RDF::Durable}\r\n* {RDF::Transaction}\r\n* [RDF::AllegroGraph](http://rubydoc.info/github/ruby-rdf/rdf-agraph) (extension)\r\n* [RDF::Mongo](http://rubydoc.info/github/ruby-rdf/rdf-mongo) (extension)\r\n* [RDF::DataObjects](http://rubydoc.info/github/ruby-rdf/rdf-do) (extension)\r\n* [RDF::Sesame](http://www.rubydoc.info/github/ruby-rdf/rdf-sesame) (extension)\r\n\r\n### RDF Querying\r\n\r\n* {RDF::Query}\r\n  * {RDF::Query::HashPatternNormalizer}\r\n  * {RDF::Query::Pattern}\r\n  * {RDF::Query::Solution}\r\n  * {RDF::Query::Solutions}\r\n  * {RDF::Query::Variable}\r\n* [SPARQL](http://rubydoc.info/github/ruby-rdf/sparql) (extension)\r\n\r\n\r\n### RDF Vocabularies\r\n\r\n* {RDF}         - Resource Description Framework (RDF)\r\n* {RDF::OWL}    - Web Ontology Language (OWL)\r\n* {RDF::RDFS}   - RDF Schema (RDFS)\r\n* {RDF::RDFV}   - RDF Vocabulary (RDFV)\r\n* {RDF::XSD}    - XML Schema (XSD)\r\n\r\n\r\n## Dependencies\r\n\r\n* [Ruby](http://ruby-lang.org/) (>= 2.0)\r\n* [LinkHeader][] (>= 0.0.8)\r\n* Soft dependency on [RestClient][] (>= 1.7)\r\n\r\n## Installation\r\n\r\nThe recommended installation method is via [RubyGems](http://rubygems.org/).\r\nTo install the latest official release of RDF.rb, do:\r\n\r\n    % [sudo] gem install rdf             # Ruby 2+\r\n\r\n## Download\r\n\r\nTo get a local working copy of the development repository, do:\r\n\r\n    % git clone git://github.com/ruby-rdf/rdf.git\r\n\r\nAlternatively, download the latest development version as a tarball as\r\nfollows:\r\n\r\n    % wget http://github.com/ruby-rdf/rdf/tarball/master\r\n\r\n## Resources\r\n\r\n* <http://rubydoc.info/github/ruby-rdf/rdf/frames>\r\n* <http://github.com/ruby-rdf/rdf>\r\n* <http://rubygems.org/gems/rdf>\r\n* <http://rubyforge.org/projects/rdf/>\r\n* <http://raa.ruby-lang.org/project/rdf/>\r\n* <http://www.ohloh.net/p/rdf>\r\n\r\n## Mailing List\r\n\r\n* <http://lists.w3.org/Archives/Public/public-rdf-ruby/>\r\n\r\n## Authors\r\n\r\n* [Arto Bendiken](http://github.com/bendiken) - <http://ar.to/>\r\n* [Ben Lavender](http://github.com/bhuga) - <http://bhuga.net/>\r\n* [Gregg Kellogg](http://github.com/gkellogg) - <http://greggkellogg.net/>\r\n\r\n## Contributors\r\n\r\n* [Călin Ardelean](http://github.com/clnx) - <http://github.com/clnx>\r\n* [Mark Borkum](http://github.com/markborkum) - <http://github.com/markborkum>\r\n* [Danny Gagne](http://github.com/danny) - <http://www.dannygagne.com/>\r\n* [Joey Geiger](http://github.com/jgeiger) - <http://github.com/jgeiger>\r\n* [Fumihiro Kato](http://github.com/fumi) - <http://fumi.me/>\r\n* [Naoki Kawamukai](http://github.com/kna) - <http://github.com/kna>\r\n* [Tom Nixon](https://github.com/tomjnixon) - <https://github.com/tomjnixon>\r\n* [Hellekin O. Wolf](http://github.com/hellekin) - <http://hellekin.cepheide.org/>\r\n* [John Fieber](http://github.com/jfieber) - <http://github.com/jfieber>\r\n* [Keita Urashima](http://github.com/ursm) - <http://ursm.jp/>\r\n* [Pius Uzamere](http://github.com/pius) - <http://pius.me/>\r\n* [Judson Lester](https://github.com/nyarly) - <https://github.com/nyarly>\r\n* [Peter Vandenabeele](https://github.com/petervandenabeele) - <https://github.com/petervandenabeele>\r\n* [Tom Johnson](https://github.com/no-reply) - <https://github.com/no-reply>\r\n\r\n## Contributing\r\n\r\nThis repository uses [Git Flow](https://github.com/nvie/gitflow) to mange development and release activity. All submissions _must_ be on a feature branch based on the _develop_ branch to ease staging and integration.\r\n\r\n* Do your best to adhere to the existing coding conventions and idioms.\r\n* Don't use hard tabs, and don't leave trailing whitespace on any line.\r\n  Before committing, run `git diff --check` to make sure of this.\r\n* Do document every method you add using [YARD][] annotations. Read the\r\n  [tutorial][YARD-GS] or just look at the existing code for examples.\r\n* Don't touch the `.gemspec` or `VERSION` files. If you need to change them,\r\n  do so on your private branch only.\r\n* Do feel free to add yourself to the `CREDITS` file and the\r\n  corresponding list in the the `README`. Alphabetical order applies.\r\n* Don't touch the `AUTHORS` file. If your contributions are significant\r\n  enough, be assured we will eventually add you in there.\r\n* Do note that in order for us to merge any non-trivial changes (as a rule\r\n  of thumb, additions larger than about 15 lines of code), we need an\r\n  explicit [public domain dedication][PDD] on record from you.\r\n\r\n## License\r\n\r\nThis is free and unencumbered public domain software. For more information,\r\nsee <http://unlicense.org/> or the accompanying {file:UNLICENSE} file.\r\n\r\n[RDF]:              http://www.w3.org/RDF/\r\n[N-Triples]:        http://www.w3.org/TR/n-triples/\r\n[N-Quads]:          http://www.w3.org/TR/n-quads/\r\n[YARD]:             http://yardoc.org/\r\n[YARD-GS]:          http://rubydoc.info/docs/yard/file/docs/GettingStarted.md\r\n[PDD]:              http://lists.w3.org/Archives/Public/public-rdf-ruby/2010May/0013.html\r\n[JSONLD doc]:       http://rubydoc.info/github/ruby-rdf/json-ld/frames\r\n[LinkedData doc]:   http://rubydoc.info/github/datagraph/linkeddata/master/frames\r\n[Microdata doc]:    http://rubydoc.info/github/ruby-rdf/rdf-microdata/frames\r\n[N3 doc]:           http://rubydoc.info/github/ruby-rdf/rdf-n3/master/frames\r\n[RDFa doc]:         http://rubydoc.info/github/ruby-rdf/rdf-rdfa/master/frames\r\n[RDFXML doc]:       http://rubydoc.info/github/ruby-rdf/rdf-rdfxml/master/frames\r\n[Turtle doc]:       http://rubydoc.info/github/ruby-rdf/rdf-turtle/master/frames\r\n[SPARQL doc]:       http://rubydoc.info/github/ruby-rdf/sparql/frames\r\n[RDF 1.0]:          http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/\r\n[RDF 1.1]:          http://www.w3.org/TR/rdf11-concepts/\r\n[SPARQL 1.0]:       http://www.w3.org/TR/rdf-sparql-query/\r\n[RDF.rb]:           http://ruby-rdf.github.com/\r\n[RDF::DO]:          http://ruby-rdf.github.com/rdf-do\r\n[RDF::Mongo]:       http://ruby-rdf.github.com/rdf-mongo\r\n[RDF::Sesame]:      http://ruby-rdf.github.com/rdf-sesame\r\n[RDF::JSON]:        http://ruby-rdf.github.com/rdf-json\r\n[RDF::Microdata]:   http://ruby-rdf.github.com/rdf-microdata\r\n[RDF::N3]:          http://ruby-rdf.github.com/rdf-n3\r\n[RDF::RDFa]:        http://ruby-rdf.github.com/rdf-rdfa\r\n[RDF::RDFXML]:      http://ruby-rdf.github.com/rdf-rdfxml\r\n[RDF::TriG]:        http://ruby-rdf.github.com/rdf-trig\r\n[RDF::TriX]:        http://ruby-rdf.github.com/rdf-trix\r\n[RDF::Turtle]:      http://ruby-rdf.github.com/rdf-turtle\r\n[RDF::Raptor]:      http://ruby-rdf.github.com/rdf-raptor\r\n[LinkedData]:       http://ruby-rdf.github.com/linkeddata\r\n[JSON::LD]:         http://gkellogg.github.com/json-ld\r\n[RestClient]:       https://rubygems.org/gems/rest-client\r\n[RestClient Components]: https://rubygems.org/gems/rest-client-components\r\n[Rack::Cache]:      http://rtomayko.github.io/rack-cache/",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}