{"tagline":"RDF.rb is a pure-Ruby library for working with Resource Description Framework (RDF) data.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"RDF.rb: Linked Data for Ruby\r\n============================\r\n\r\nThis is a pure-Ruby library for working with [Resource Description Framework\r\n(RDF)][RDF] data.\r\n\r\n* <http://ruby-rdf.github.com/rdf>\r\n* <http://blog.datagraph.org/2010/12/rdf-for-ruby>\r\n* <http://blog.datagraph.org/2010/03/rdf-for-ruby>\r\n* <http://blog.datagraph.org/2010/04/parsing-rdf-with-ruby>\r\n* <http://blog.datagraph.org/2010/04/rdf-repository-howto>\r\n\r\nFeatures\r\n--------\r\n\r\n* 100% pure Ruby with minimal dependencies and no bloat.\r\n* 100% free and unencumbered [public domain](http://unlicense.org/) software.\r\n* Provides a clean, well-designed RDF object model and related APIs.\r\n* Supports parsing and serializing N-Triples out of the box, with more\r\n  serialization format support available through add-on plugins.\r\n* Includes in-memory graph and repository implementations, with more storage\r\n  adapter support available through add-on plugins.\r\n* Implements basic graph pattern (BGP) query evaluation.\r\n* Plays nice with others: entirely contained in the `RDF` module, and does\r\n  not modify any of Ruby's core classes or standard library.\r\n* Based entirely on Ruby's autoloading, meaning that you can generally make\r\n  use of any one part of the library without needing to load up the rest.\r\n* Compatible with Ruby 1.8.7+, Ruby 1.9.x, and JRuby 1.4/1.5.\r\n* Compatible with older Ruby versions with the help of the [Backports][] gem.\r\n* Performs auto-detection of input to select appropriate Reader class if one\r\n  cannot be determined from file characteristics.\r\n\r\nTutorials\r\n---------\r\n\r\n* [Getting data from the Semantic Web using Ruby and RDF.rb](http://semanticweb.org/wiki/Getting_data_from_the_Semantic_Web_%28Ruby%29)\r\n* [Using RDF.rb and Spira to process RDF data from the British Ordnance Survey](http://stephenpope.co.uk/?p=85)\r\n* [Getting started with RDF and SPARQL using 4store and RDF.rb](http://www.jenitennison.com/blog/node/152)\r\n\r\nCommand Line\r\n------------\r\nWhen installed, RDF.rb includes a `rdf` shell script which acts as a wrapper to perform a number of different\r\noperations on RDF files using available readers and writers.\r\n\r\n* `serialize`: Parse an RDF input and re-serializing to N-Triples or another available format using `--output-format` option.\r\n* `count`: Parse and RDF input and count the number of statements.\r\n* `subjects`: Returns unique subjects from parsed input.\r\n* `objects`: Returns unique objects from parsed input.\r\n* `predicates`: Returns unique objects from parsed input.\r\n\r\nExamples\r\n--------\r\n\r\n    require 'rdf'\r\n    include RDF\r\n\r\n### Writing RDF data using the N-Triples format\r\n\r\n    require 'rdf/ntriples'\r\n    graph = RDF::Graph.new << [:hello, RDF::DC.title, \"Hello, world!\"]\r\n    graph.dump(:ntriples)\r\n    \r\nor\r\n\r\n    RDF::Writer.open(\"hello.nt\") { |writer| writer << graph }\r\n\r\n### Reading RDF data in the N-Triples format\r\n\r\n    require 'rdf/ntriples'\r\n    graph = RDF::Graph.load(\"http://ruby-rdf.github.com/rdf/etc/doap.nt\")\r\n    \r\nor\r\n\r\n    RDF::Reader.open(\"http://ruby-rdf.github.com/rdf/etc/doap.nt\") do |reader|\r\n      reader.each_statement do |statement|\r\n        puts statement.inspect\r\n      end\r\n    end\r\n\r\n### Reading RDF data in other formats\r\n{RDF::Reader.open} and {RDF::Repository.load} use a number of mechanisms to determine the appropriate reader\r\nto use when loading a file. The specific format to use can be forced using, e.g. `:format => :ntriples`\r\noption where the specific format symbol is determined by the available readers. Both also use\r\nMimeType or file extension, where available.\r\n\r\n    require 'linkeddata'\r\n    \r\n    graph = RDF::Graph.load(\"http://ruby-rdf.github.com/rdf/etc/doap.nq\", :format => :nquads)\r\n\r\nA specific sub-type of Reader can also be invoked directly:\r\n\r\n    require 'rdf/nquads'\r\n    \r\n    RDF::NQuads::Reader.open(\"http://ruby-rdf.github.com/rdf/etc/doap.nq\") do |reader|\r\n      reader.each_statement do |statement|\r\n        puts statement.inspect\r\n      end\r\n    end\r\n\r\nReader/Writer implementations may override {RDF::Format.detect}, which takes a small sample if input\r\nand return a boolean indicating if it matches that specific format. In the case that a format cannot\r\nbe detected from filename or other options, or that more than one format is identified,\r\n{RDF::Format.for} will query each loaded format by invoking it's `detect` method, and the first successful\r\nmatch will be used to read the input.\r\n\r\n### Writing RDF data using other formats\r\n{RDF::Writer.open}, {RDF::Enumerable#dump}, {RDF::Writer.dump} take similar options to {RDF::Reader.open} to determine the\r\nappropriate writer to use.\r\n\r\n    require 'linkeddata'\r\n\r\n    RDF::Writer.open(\"hello.nq\", :format => :nquads) do |writer|\r\n      writer << RDF::Repository.new do |repo|\r\n        repo << RDF::Statement.new(:hello, RDF::DC.title, \"Hello, world!\", :context => RDF::URI(\"context\"))\r\n      end\r\n    end\r\n\r\nA specific sub-type of Writer can also be invoked directly:\r\n\r\n    graph.dump(:nquads)\r\n\r\n### Querying RDF data using basic graph patterns (BGPs)\r\n\r\n    require 'rdf/ntriples'\r\n    \r\n    graph = RDF::Graph.load(\"http://ruby-rdf.github.com/rdf/etc/doap.nt\")\r\n    query = RDF::Query.new({\r\n      :person => {\r\n        RDF.type  => FOAF.Person,\r\n        FOAF.name => :name,\r\n        FOAF.mbox => :email,\r\n      }\r\n    })\r\n    \r\n    query.execute(graph).each do |solution|\r\n      puts \"name=#{solution.name} email=#{solution.email}\"\r\n    end\r\n\r\nA separate [SPARQL][SPARQL doc] gem builds on basic BGP support to provide full support for [SPARQL 1.0](http://www.w3.org/TR/rdf-sparql-query/) queries.\r\n\r\n### Using pre-defined RDF vocabularies\r\n\r\n    DC.title      #=> RDF::URI(\"http://purl.org/dc/terms/title\")\r\n    FOAF.knows    #=> RDF::URI(\"http://xmlns.com/foaf/0.1/knows\")\r\n    RDF.type      #=> RDF::URI(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\")\r\n    RDFS.seeAlso  #=> RDF::URI(\"http://www.w3.org/2000/01/rdf-schema#seeAlso\")\r\n    RSS.title     #=> RDF::URI(\"http://purl.org/rss/1.0/title\")\r\n    OWL.sameAs    #=> RDF::URI(\"http://www.w3.org/2002/07/owl#sameAs\")\r\n    XSD.dateTime  #=> RDF::URI(\"http://www.w3.org/2001/XMLSchema#dateTime\")\r\n\r\n### Using ad-hoc RDF vocabularies\r\n\r\n    foaf = RDF::Vocabulary.new(\"http://xmlns.com/foaf/0.1/\")\r\n    foaf.knows    #=> RDF::URI(\"http://xmlns.com/foaf/0.1/knows\")\r\n    foaf[:name]   #=> RDF::URI(\"http://xmlns.com/foaf/0.1/name\")\r\n    foaf['mbox']  #=> RDF::URI(\"http://xmlns.com/foaf/0.1/mbox\")\r\n\r\nDocumentation\r\n-------------\r\n\r\n<http://rubydoc.info/github/ruby-rdf/rdf/frames>\r\n\r\n### RDF Object Model\r\n\r\n<http://blog.datagraph.org/2010/03/rdf-for-ruby>\r\n\r\n* {RDF::Value}\r\n  * {RDF::Term}\r\n    * {RDF::Literal}\r\n      * {RDF::Literal::Boolean}\r\n      * {RDF::Literal::Date}\r\n      * {RDF::Literal::DateTime}\r\n      * {RDF::Literal::Decimal}\r\n      * {RDF::Literal::Double}\r\n      * {RDF::Literal::Integer}\r\n      * {RDF::Literal::Time}\r\n      * [RDF::XSD](http://rubydoc.info/github/gkellogg/rdf-xsd/master/frames) (plugin)\r\n    * {RDF::Resource}\r\n      * {RDF::List}\r\n      * {RDF::Node}\r\n      * {RDF::URI}\r\n      * {RDF::Graph}\r\n  * {RDF::Statement}\r\n\r\n### RDF Serialization\r\n\r\n<http://blog.datagraph.org/2010/04/parsing-rdf-with-ruby>\r\n\r\n* {RDF::Format}\r\n* {RDF::Reader}\r\n* {RDF::Writer}\r\n\r\n### RDF Serialization Formats\r\n\r\nThe following is a partial list of RDF formats implemented either natively, or through the inclusion of\r\nother gems:\r\n\r\n* {RDF::NTriples}\r\n* {RDF::NQuads}\r\n* [JSON::LD][] (plugin)\r\n* [RDF::JSON][] (plugin)\r\n* [RDF::Microdata][] (plugin)\r\n* [RDF::N3][] (plugin)\r\n* [RDF::Raptor::RDFXML](http://ruby-rdf.github.com/rdf-raptor) (plugin)\r\n* [RDF::Raptor::Turtle](http://ruby-rdf.github.com/rdf-raptor) (plugin)\r\n* [RDF::RDFa][] (plugin)\r\n* [RDF::RDFXML][] (plugin)\r\n* [RDF::TriG][] (plugin)\r\n* [RDF::TriX][] (plugin)\r\n* [RDF::Turtle][] (plugin)\r\n\r\nThe meta-gem [LinkedData][LinkedData doc] includes many of these gems.\r\n\r\n### RDF Storage\r\n\r\n<http://blog.datagraph.org/2010/04/rdf-repository-howto>\r\n\r\n* {RDF::Repository}\r\n  * {RDF::Countable}\r\n  * {RDF::Enumerable}\r\n  * {RDF::Indexable}\r\n  * {RDF::Inferable}\r\n  * {RDF::Queryable}\r\n  * {RDF::Mutable}\r\n  * {RDF::Durable}\r\n* {RDF::Transaction}\r\n* [RDF::AllegroGraph](http://rubydoc.info/github/emk/rdf-agraph/master/frames) (plugin)\r\n* [RDF::Mongo](http://rubydoc.info/github/pius/rdf-mongo/master/frames) (plugin)\r\n* [RDF::DataObjects](http://rubydoc.info/github/ruby-rdf/rdf-do/frames) (plugin)\r\n* [RDF::Sesame](http://rdf.rubyforge.org/sesame/) (plugin)\r\n\r\n### RDF Querying\r\n\r\n* {RDF::Query}\r\n  * {RDF::Query::Pattern}\r\n  * {RDF::Query::Solution}\r\n  * {RDF::Query::Solutions}\r\n  * {RDF::Query::Variable}\r\n* [SPARQL](http://rubydoc.info/github/ruby-rdf/sparql/frames) (plugin)\r\n\r\n\r\n### RDF Vocabularies\r\n\r\n* {RDF}        - Resource Description Framework (RDF)\r\n* {RDF::CC}    - Creative Commons (CC)\r\n* {RDF::CERT}  - W3 Authentication Certificate (CERT)\r\n* {RDF::DC}    - Dublin Core (DC)\r\n* {RDF::DC11}  - Dublin Core 1.1 (DC11) _deprecated_\r\n* {RDF::DOAP}  - Description of a Project (DOAP)\r\n* {RDF::EXIF}  - Exchangeable Image File Format (EXIF)\r\n* {RDF::FOAF}  - Friend of a Friend (FOAF)\r\n* {RDF::GEO}   - WGS84 Geo Positioning (GEO)\r\n* {RDF::HTTP}  - Hypertext Transfer Protocol (HTTP)\r\n* {RDF::OWL}   - Web Ontology Language (OWL)\r\n* {RDF::RDFS}  - RDF Schema (RDFS)\r\n* {RDF::RSA}   - W3 RSA Keys (RSA)\r\n* {RDF::RSS}   - RDF Site Summary (RSS)\r\n* {RDF::SIOC}  - Semantically-Interlinked Online Communities (SIOC)\r\n* {RDF::SKOS}  - Simple Knowledge Organization System (SKOS)\r\n* {RDF::WOT}   - Web of Trust (WOT)\r\n* {RDF::XHTML} - Extensible HyperText Markup Language (XHTML)\r\n* {RDF::XSD}   - XML Schema (XSD)\r\n\r\nDependencies\r\n------------\r\n\r\n* [Ruby](http://ruby-lang.org/) (>= 1.8.7) or (>= 1.8.1 with [Backports][])\r\n* [Addressable](http://rubygems.org/gems/addressable) (>= 2.2.0)\r\n\r\nInstallation\r\n------------\r\n\r\nThe recommended installation method is via [RubyGems](http://rubygems.org/).\r\nTo install the latest official release of RDF.rb, do:\r\n\r\n    % [sudo] gem install rdf             # Ruby 1.8.7+ or 1.9.x\r\n    % [sudo] gem install backports rdf   # Ruby 1.8.1+\r\n\r\nDownload\r\n--------\r\n\r\nTo get a local working copy of the development repository, do:\r\n\r\n    % git clone git://github.com/ruby-rdf/rdf.git\r\n\r\nAlternatively, download the latest development version as a tarball as\r\nfollows:\r\n\r\n    % wget http://github.com/ruby-rdf/rdf/tarball/master\r\n\r\nResources\r\n---------\r\n\r\n* <http://rubydoc.info/github/ruby-rdf/rdf/frames>\r\n* <http://github.com/ruby-rdf/rdf>\r\n* <http://rubygems.org/gems/rdf>\r\n* <http://rubyforge.org/projects/rdf/>\r\n* <http://raa.ruby-lang.org/project/rdf/>\r\n* <http://www.ohloh.net/p/rdf>\r\n\r\nMailing List\r\n------------\r\n\r\n* <http://lists.w3.org/Archives/Public/public-rdf-ruby/>\r\n\r\nAuthors\r\n-------\r\n\r\n* [Arto Bendiken](http://github.com/bendiken) - <http://ar.to/>\r\n* [Ben Lavender](http://github.com/bhuga) - <http://bhuga.net/>\r\n* [Gregg Kellogg](http://github.com/gkellogg) - <http://kellogg-assoc.com/>\r\n\r\nContributors\r\n------------\r\n\r\n* [Călin Ardelean](http://github.com/clnx) - <http://github.com/clnx>\r\n* [Danny Gagne](http://github.com/danny) - <http://www.dannygagne.com/>\r\n* [Joey Geiger](http://github.com/jgeiger) - <http://github.com/jgeiger>\r\n* [Fumihiro Kato](http://github.com/fumi) - <http://fumi.me/>\r\n* [Naoki Kawamukai](http://github.com/kna) - <http://github.com/kna>\r\n* [Hellekin O. Wolf](http://github.com/hellekin) - <http://hellekin.cepheide.org/>\r\n* [John Fieber](http://github.com/jfieber) - <http://github.com/jfieber>\r\n* [Keita Urashima](http://github.com/ursm) - <http://ursm.jp/>\r\n* [Pius Uzamere](http://github.com/pius) - <http://pius.me/>\r\n\r\nContributing\r\n------------\r\n\r\n* Do your best to adhere to the existing coding conventions and idioms.\r\n* Don't use hard tabs, and don't leave trailing whitespace on any line.\r\n* Do document every method you add using [YARD][] annotations. Read the\r\n  [tutorial][YARD-GS] or just look at the existing code for examples.\r\n* Don't touch the `.gemspec` or `VERSION` files. If you need to change them,\r\n  do so on your private branch only.\r\n* Do feel free to add yourself to the `CREDITS` file and the\r\n  corresponding list in the the `README`. Alphabetical order applies.\r\n* Don't touch the `AUTHORS` file. If your contributions are significant\r\n  enough, be assured we will eventually add you in there.\r\n* Do note that in order for us to merge any non-trivial changes (as a rule\r\n  of thumb, additions larger than about 15 lines of code), we need an\r\n  explicit [public domain dedication][PDD] on record from you.\r\n\r\nLicense\r\n-------\r\n\r\nThis is free and unencumbered public domain software. For more information,\r\nsee <http://unlicense.org/> or the accompanying {file:UNLICENSE} file.\r\n\r\n[RDF]:              http://www.w3.org/RDF/\r\n[YARD]:             http://yardoc.org/\r\n[YARD-GS]:          http://rubydoc.info/docs/yard/file/docs/GettingStarted.md\r\n[PDD]:              http://lists.w3.org/Archives/Public/public-rdf-ruby/2010May/0013.html\r\n[Backports]:        http://rubygems.org/gems/backports\r\n[JSONLD doc]:       http://rubydoc.info/github/gkellogg/json-ld/frames\r\n[LinkedData doc]:   http://rubydoc.info/github/datagraph/linkeddata/master/frames\r\n[Microdata doc]:    http://rubydoc.info/github/ruby-rdf/rdf-microdata/frames\r\n[N3 doc]:           http://rubydoc.info/github/ruby-rdf/rdf-n3/master/frames\r\n[RDFa doc]:         http://rubydoc.info/github/ruby-rdf/rdf-rdfa/master/frames\r\n[RDFXML doc]:       http://rubydoc.info/github/ruby-rdf/rdf-rdfxml/master/frames\r\n[Turtle doc]:       http://rubydoc.info/github/ruby-rdf/rdf-turtle/master/frames\r\n[SPARQL doc]:       http://rubydoc.info/github/ruby-rdf/sparql/frames\r\n[SPARQL 1.0]:       http://www.w3.org/TR/rdf-sparql-query/\r\n[RDF.rb]:           http://ruby-rdf.github.com/rdf\r\n[RDF::DO]:          http://ruby-rdf.github.com/rdf-do\r\n[RDF::Mongo]:       http://ruby-rdf.github.com/rdf-mongo\r\n[RDF::Sesame]:      http://ruby-rdf.github.com/rdf-sesame\r\n[RDF::JSON]:        http://ruby-rdf.github.com/rdf-json\r\n[RDF::Microdata]:   http://ruby-rdf.github.com/rdf-microdata\r\n[RDF::N3]:          http://ruby-rdf.github.com/rdf-n3\r\n[RDF::RDFa]:        http://ruby-rdf.github.com/rdf-rdfa\r\n[RDF::RDFXML]:      http://ruby-rdf.github.com/rdf-rdfxml\r\n[RDF::TriX]:        http://ruby-rdf.github.com/rdf-trix\r\n[RDF::Turtle]:      http://ruby-rdf.github.com/rdf-turtle\r\n[RDF::Raptor]:      http://ruby-rdf.github.com/rdf-raptor\r\n[LinkedData]:       http://ruby-rdf.github.com/linkeddata\r\n[JSON::LD]:         http://gkellogg.github.com/json-ld\r\n","name":"RDF.rb","google":""}